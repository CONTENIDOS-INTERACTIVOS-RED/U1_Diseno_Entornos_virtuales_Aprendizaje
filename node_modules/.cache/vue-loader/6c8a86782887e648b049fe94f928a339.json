{"remainingRequest":"/home/runner/work/U1_Diseno_Entornos_virtuales_Aprendizaje/U1_Diseno_Entornos_virtuales_Aprendizaje/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Diseno_Entornos_virtuales_Aprendizaje/U1_Diseno_Entornos_virtuales_Aprendizaje/src/views/curso/Tema1.vue?vue&type=template&id=11fd5c62&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Diseno_Entornos_virtuales_Aprendizaje/U1_Diseno_Entornos_virtuales_Aprendizaje/src/views/curso/Tema1.vue","mtime":1746505653286},{"path":"/home/runner/work/U1_Diseno_Entornos_virtuales_Aprendizaje/U1_Diseno_Entornos_virtuales_Aprendizaje/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Diseno_Entornos_virtuales_Aprendizaje/U1_Diseno_Entornos_virtuales_Aprendizaje/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Diseno_Entornos_virtuales_Aprendizaje/U1_Diseno_Entornos_virtuales_Aprendizaje/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Diseno_Entornos_virtuales_Aprendizaje/U1_Diseno_Entornos_virtuales_Aprendizaje/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Diseno_Entornos_virtuales_Aprendizaje/U1_Diseno_Entornos_virtuales_Aprendizaje/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMS4gRnVuZGFtZW50b3MgZGUgbG9zIEVudG9ybm9zIFZpcnR1YWxlcyBkZSBBcHJlbmRpemFqZSciKQogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5vdmVyZmxvdy1oaWRkZW4KICAgIC5iZy1jb2xvci0yLm1iLTUoZGF0YS1hb3M9ImZhZGUtdXAiKQogICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgLmNvbC1sZy5vcmRlci1sZy0yCiAgICAgICAgICAucC00CiAgICAgICAgICAgIHAubWItMChkYXRhLWFvcz0iZmFkZS11cCIpIExvcyBFbnRvcm5vcyBWaXJ0dWFsZXMgZGUgQXByZW5kaXphamUgKEVWQSksIGhhbiBldm9sdWNpb25hZG8gc2lnbmlmaWNhdGl2YW1lbnRlIGVuIGxhcyDDumx0aW1hcyBkw6ljYWRhcywgY29uc29saWTDoW5kb3NlIGNvbW8gZXNwYWNpb3MgZGUgaW50ZXJhY2Npw7NuIHkgY29uc3RydWNjacOzbiBkZWwgY29ub2NpbWllbnRvLiBtZWRpYWRvcyBwb3IgdGVjbm9sb2fDrWFzIGRpZ2l0YWxlcy4gRGlzZcOxYWRvcyBwYXJhIGZhY2lsaXRhciBsb3MgcHJvY2Vzb3MgZGUgZW5zZcOxYW56YSB5IGFwcmVuZGl6YWplIGVuIGRpdmVyc29zIGNvbnRleHRvcyBlZHVjYXRpdm9zLCBvZnJlY2VuIGZsZXhpYmlsaWRhZCB5IGFkYXB0YWJpbGlkYWQgYSBsYXMgbmVjZXNpZGFkZXMgZGUgbG9zIGVzdHVkaWFudGVzIChTaWx2YSBRdWlyb3osIDIwMTEpLiAgICAgIAogICAgICAgIC5jb2wtbGctYXV0by5tYi0zLm1iLWxnLTAub3JkZXItbGctMQogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzQucG5nJywgYWx0PScnKQoKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTgKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBTdSBkaXNlw7FvIGUgaW1wbGVtZW50YWNpw7NuIGRlYmUgYmFzYXJzZSBlbiBwcmluY2lwaW9zIHBlZGFnw7NnaWNvcyBxdWUgZmF2b3JlemNhbiBsYSBwYXJ0aWNpcGFjacOzbiBhY3RpdmEgZGVsIGVzdHVkaWFudGUsIHByb21vdmllbmRvIG1ldG9kb2xvZ8OtYXMgY2VudHJhZGFzIGVuIGVsIGFwcmVuZGl6YWplIHNpZ25pZmljYXRpdm8uIEVuIGVzdGUgc2VudGlkbywgbW9kZWxvcyBjb21vIGVsIGRpc2XDsW8gaW5zdHJ1Y2Npb25hbCBBRERJRSB5IGVsIG1hcmNvIFRQQUNLLCBzb24gaGVycmFtaWVudGFzIGVzZW5jaWFsZXMgcGFyYSBwbGFuaWZpY2FyIGV4cGVyaWVuY2lhcyBlZHVjYXRpdmFzIGVmaWNhY2VzIGVuIGVudG9ybm9zIGRpZ2l0YWxlcyAoQmF1dGlzdGEgUMOpcmV6LCBCb3JnZXMgU8OhaXogJiBGb3LDqXMgTWlyYXZhbGxlcywgMjAxNikuICAgICAKICAgICAgICAuYmctY29sb3ItMy5wLTQubWItMyhkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvNS5zdmciKQogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgcC5tYi0wIEVsIHBlbnNhbWllbnRvIHBvbMOtdGljbyBoYSBldm9sdWNpb25hZG8gYSBsbyBsYXJnbyBkZSBsYSBoaXN0b3JpYSwgcHJvcG9yY2lvbmFuZG8gZGl2ZXJzYXMgaW50ZXJwcmV0YWNpb25lcyBzb2JyZSBsYSBmdW5jacOzbiB5IG5hdHVyYWxlemEgZGVsIEVzdGFkby4gQ2FkYSB0ZW9yw61hIGhhIHN1cmdpZG8gZW4gdW4gY29udGV4dG8gaGlzdMOzcmljbyBlc3BlY8OtZmljbyB5IGhhIHJlc3BvbmRpZG8gYSBwcm9ibGVtw6F0aWNhcyBwYXJ0aWN1bGFyZXMgZGUgc3Ugw6lwb2NhIHksIGVsIGVzdHVkaW8gZGUgZXN0YXMgcGVybWl0ZSBjb21wcmVuZGVyIGPDs21vIHNlIGhhIGNvbnN0cnVpZG8gbGEgb3JnYW5pemFjacOzbiBwb2zDrXRpY2EgYWN0dWFsLiBBbmFsaXphciBsYXMgaWRlYXMgZGUgZXN0b3MgcGVuc2Fkb3JlcyBlcyBmdW5kYW1lbnRhbCBwYXJhIGlkZW50aWZpY2FyIGxvcyBjaW1pZW50b3Mgc29icmUgbG9zIGN1YWxlcyBzZSBzdXN0ZW50YW4gbG9zIHNpc3RlbWFzIGRlIGdvYmllcm5vIHkgbGFzIGZvcm1hcyBlbiBsYXMgcXVlIHNlIGVqZXJjZSBlbCBwb2Rlci4KICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBBc2ltaXNtbywgbGEgYWNjZXNpYmlsaWRhZCB5IGxhIGluY2x1c2nDs24gc2UgaGFuIGNvbnZlcnRpZG8gZW4gcGlsYXJlcyBmdW5kYW1lbnRhbGVzIGRlbCBkaXNlw7FvIGRlIGxvcyBFVkEuIEluY2x1aXIgdGVjbm9sb2fDrWFzIGFjY2VzaWJsZXMgeSBlc3RyYXRlZ2lhcyBxdWUgYXRpZW5kYW4gbGEgZGl2ZXJzaWRhZCBlc3R1ZGlhbnRpbCwgcGVybWl0ZSBtZWpvcmFyIGxhIGVxdWlkYWQgZW4gZWwgYWNjZXNvIGEgbGEgZWR1Y2FjacOzbiAoUmFtw61yZXogQ2hpcmlub3MsIDIwMTMpLgogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy82LnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikgICAgICAgICAgICAgIAoKICAgIC5iZy1mdWxsLXdpZHRoLTEuYmctY29sb3ItNC5tYi01CiAgICAgIC5weC00LnB4LW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTEyCiAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgICAuY29sLWxnLTQubWItMC5tYi1tZC00Lm1iLWxnLTAoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNy5zdmcnLCBhbHQ9IiIgKSAgICAgICAgICAgIAogICAgICAgICAgICAgIC5jb2wtbGctOC5tYi01Lm1iLW1kLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICAgICAgICBwIEVsIGVzdHVkaW8gZGUgbG9zIEVWQSBpbXBsaWNhIG5vIHNvbG8gY29tcHJlbmRlciBzdXMgYmFzZXMgdGVjbm9sw7NnaWNhcywgc2lubyB0YW1iacOpbiBleHBsb3JhciBtb2RlbG9zIGRpZMOhY3RpY29zIHF1ZSBvcHRpbWljZW4gbGEgZW5zZcOxYW56YS4gRXN0cmF0ZWdpYXMgaW5ub3ZhZG9yYXMgY29tbyBlbCBhcHJlbmRpemFqZSBiYXNhZG8gZW4gcHJvYmxlbWFzIG8gbGEgI1tiIGdhbWlmaWNhY2nDs25dLCBoYW4gZGVtb3N0cmFkbyBzZXIgZWZlY3RpdmFzIHBhcmEgYXVtZW50YXIgbGEgbW90aXZhY2nDs24geSBlbCBjb21wcm9taXNvIGVzdHVkaWFudGlsIChBY2V2ZWRvLUJsYW5jbywgRMOtYXogUGVyZWEgJiBGZXJuw6FuZGV6IFJvZHLDrWd1ZXosIDIwMjQpLgoKICAgICAgICAgICAgICAgIHAubWItMCBFc3RlIGVzdHVkaW8gdGllbmUgY29tbyBvYmpldGl2byBhbmFsaXphciBsb3MgcHJpbmNpcGlvcyBmdW5kYW1lbnRhbGVzIGRlIGxvcyBFVkEsIGJyaW5kYW5kbyBoZXJyYW1pZW50YXMgcGFyYSBkaXNlw7FhciBlbnRvcm5vcyBkZSBhcHJlbmRpemFqZSBhZGFwdGFkb3MgYSBsb3MgbnVldm9zIGRlc2Fmw61vcyBlZHVjYXRpdm9zLgoKICAgICN0XzFfMS50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAxLjFdIENvbmNlcHRvcywgZXZvbHVjacOzbiB5IGNhcmFjdGVyw61zdGljYXMgZGUgbG9zIEVWQQoKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTgKICAgICAgICAuYmctY29sb3ItMS5wLTQubWItNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvOC5zdmciKQogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgcC5tYi0wIExvcyBFVkEgaGFuIHJldm9sdWNpb25hZG8gbG9zIG1vZGVsb3MgZWR1Y2F0aXZvcyB0cmFkaWNpb25hbGVzLCBvZnJlY2llbmRvIGVzcGFjaW9zIGRpZ2l0YWxlcyBxdWUgZmF2b3JlY2VuIGVsIGFwcmVuZGl6YWplIGF1dMOzbm9tbywgY29sYWJvcmF0aXZvIHkgZmxleGlibGUuIEVzdG9zIGVudG9ybm9zIGRpZ2l0YWxlcyBwZXJtaXRlbiBsYSBpbnRlcmFjY2nDs24gZW50cmUgZXN0dWRpYW50ZXMsIGRvY2VudGVzIHkgbWF0ZXJpYWxlcyBlZHVjYXRpdm9zLCBtZWRpYW50ZSBoZXJyYW1pZW50YXMgZGUgY29tdW5pY2FjacOzbiwgZXZhbHVhY2nDs24geSByZWN1cnNvcyBtdWx0aW1lZGlhIChTaWx2YSBRdWlyb3osIDIwMTEpLgogICAgICAgIGg0KGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBDb25jZXB0b3MgZnVuZGFtZW50YWxlcwogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIFVuIEVWQSBkZWJlIHJlc3BvbmRlciBhIHByaW5jaXBpb3MgcGVkYWfDs2dpY29zIHF1ZSBhc2VndXJlbiBsYSBjb25zdHJ1Y2Npw7NuIGVmZWN0aXZhIGRlbCBjb25vY2ltaWVudG8uIFNlZ8O6biBCYXV0aXN0YSBQw6lyZXosIEJvcmdlcyBTw6FpeiB5IEZvcsOpcyBNaXJhdmFsbGVzICgyMDE2KSwgc3VzIGZ1bmNpb25lcyBjbGF2ZXMgaW5jbHV5ZW46CiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzkucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKSAgCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUgICAgICAgICAgIAogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgLmJnLWNvbG9yLTIuaC0xMDAucC0zCiAgICAgICAgICBoNShkYXRhLWFvcz0iZmFkZS1kb3duIikgMDEgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlcihkYXRhLWFvcz0iZmFkZS11cCIpIEZhY2lsaXRhciBlbCBhY2Nlc28gYSBsYSBpbmZvcm1hY2nDs24uICAKICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgIC5iZy1jb2xvci0yLmgtMTAwLnAtMwogICAgICAgICAgaDUoZGF0YS1hb3M9ImZhZGUtZG93biIpIDAyICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIoZGF0YS1hb3M9ImZhZGUtdXAiKSBGb21lbnRhciBsYSBhdXRvbm9tw61hIGRlbCBlc3R1ZGlhbnRlLgogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgLmJnLWNvbG9yLTIuaC0xMDAucC0zCiAgICAgICAgICBoNShkYXRhLWFvcz0iZmFkZS1kb3duIikgMDMgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyKGRhdGEtYW9zPSJmYWRlLXVwIikgUHJvbW92ZXIgbGEgaW50ZXJhY2Npw7NuIGVudHJlIGxvcyBwYXJ0aWNpcGFudGVzLiAgIAoKCgogICAgLmJnLWZ1bGwtd2lkdGgtMS5iZy1jb2xvci01Lm1iLTUucHktNAogICAgICAucHgtNC5weC1tZC01CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy0xMgogICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgICAgLmNvbC1hdXRvLm1iLTAubWItbWQtNC5tYi1sZy0wKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzkuc3ZnJywgYWx0PSIiICkgICAgICAgICAgICAKICAgICAgICAgICAgICAuY29sKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgICAgICAgcC5tYi0wLnRleHQtd2hpdGUgRW4gY29udGV4dG9zIHByw6FjdGljb3MsIGNvbW8gbGEgZ2VzdGnDs24gZGUgcHJveWVjdG9zIGVuIGVkdWNhY2nDs24sIHVuIEVWQSBwdWVkZSBpbmNsdWlyIHNpbXVsYWRvcmVzIHF1ZSBwZXJtaXRhbiBhIGxvcyBlc3R1ZGlhbnRlcyBwbGFuaWZpY2FyLCBlamVjdXRhciB5IGV2YWx1YXIgcHJveWVjdG9zLiBQb3IgZWplbXBsbywgYWxndW5hcyBwbGF0YWZvcm1hcyBpbnRlZ3JhbiBkaWFncmFtYXMgZGUgR2FudHQgaW50ZXJhY3Rpdm9zIHkgZXNwYWNpb3MgY29sYWJvcmF0aXZvcywgcGFyYSBkZXNhcnJvbGxhciBwcm9wdWVzdGFzIHJlYWxlcyBkZSBtZWpvcmEgaW5zdGl0dWNpb25hbC4gIAoKICAgIGg0KGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBFdm9sdWNpw7NuIGRlIGxvcyBFVkEKICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEluaWNpYWxtZW50ZSBjZW50cmFkb3MgZW4gbGEgZGlzdHJpYnVjacOzbiBkZSBjb250ZW5pZG9zLCBsb3MgRVZBIGhhbiBldm9sdWNpb25hZG8gZ3JhY2lhcyBhIGxhIGluY29ycG9yYWNpw7NuIGRlIG51ZXZhcyB0ZWNub2xvZ8OtYXMuIEhveSBlbiBkw61hIGludGVncmFuOgoKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy8xMC5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgIC5jb2wtbGctOAogICAgICAgIHAgRWwgc2lsZW5jaW8gZXMgdW4gcmVjdXJzbyBwb2Rlcm9zbyBlbiBsYSBvcmF0b3JpYS4gQ3VhbmRvIHNlIHV0aWxpemEgZXN0cmF0w6lnaWNhbWVudGUsIHVuYSBwYXVzYSBwdWVkZToKICAgICAgICAuYmctY29sb3ItNi5wLTQucGItMChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIC5yb3cKICAgICAgICAgICAgLmNvbC5jb2wtbGctOC5tYi0zLm1iLWxnLTAuYWxpZ24tY29udGVudC1jZW50ZXIKICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTIKICAgICAgICAgICAgICAgICAgcC5tYi0wIEFwcmVuZGl6YWplIGFkYXB0YXRpdm8uCiAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEyCiAgICAgICAgICAgICAgICAgIHAubWItMCBHYW1pZmljYWNpw7NuLgogICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMgogICAgICAgICAgICAgICAgICBwLm1iLTAgSW50ZWxpZ2VuY2lhIEFydGlmaWNpYWwuCiAgICAgICAgICAgIC5jb2wtYXV0bwogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvMTEuc3ZnIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAKICAgICAgICAuYmctY29sb3ItNy5wLTQubWItMyhkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIHAubWItMCBFc3RhcyBpbm5vdmFjaW9uZXMgcGVybWl0ZW4gZXhwZXJpZW5jaWFzIHBlcnNvbmFsaXphZGFzIHkgY2VudHJhZGFzIGVuIGVsIGVzdHVkaWFudGUgKFJhbcOtcmV6IENoaXJpbm9zLCAyMDEzKS4gRW4gZm9ybWFjacOzbiBhdmFuemFkYSwgY29tbyBwcm9ncmFtYXMgZGUgcG9zZ3JhZG8gZW4gaW5ub3ZhY2nDs24gZWR1Y2F0aXZhLCBsb3MgRVZBIGhhbiBmYWNpbGl0YWRvIG1ldG9kb2xvZ8OtYXMgYWN0aXZhcyBjb21vIGVsIGFwcmVuZGl6YWplIGJhc2FkbyBlbiBwcm95ZWN0b3MgKEFCUCkuIFVuIGVqZW1wbG8gZXMgZWwgdXNvIGRlIHBsYXRhZm9ybWFzIGRvbmRlIGxvcyBlc3R1ZGlhbnRlcyBkaXNlw7FhbiBlc3RyYXRlZ2lhcyBlZHVjYXRpdmFzIGRpZ2l0YWxlcywgYSBwYXJ0aXIgZGUgZXN0dWRpb3MgZGUgY2FzbyB5IGV4cGVyaWVuY2lhcyBzaW11bGFkYXMsIGVtcGxlYW5kbyBoZXJyYW1pZW50YXMgZGUgYW7DoWxpc2lzIGRlIGRhdG9zIChBY2V2ZWRvLUJsYW5jbywgRMOtYXogUGVyZWEgJiBGZXJuw6FuZGV6IFJvZHLDrWd1ZXosIDIwMjQpLiAgICAgICAKCiAgICAuYmctZnVsbC13aWR0aC0yLmJnLWZvbmRvLTEubWItNS5weS00CiAgICAgIC5weC00LnB4LW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTEyCgogICAgICAgICAgICBoNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgQ2FyYWN0ZXLDrXN0aWNhcyBjbGF2ZXMgZGUgbG9zIEVWQQogICAgICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00IExvcyBFbnRvcm5vcyBWaXJ0dWFsZXMgZGUgQXByZW5kaXphamUsIHByZXNlbnRhbiBsYXMgc2lndWllbnRlcyBjYXJhY3RlcsOtc3RpY2FzIGZ1bmRhbWVudGFsZXM6CgogICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtc3RyZXRjaC50ZXh0LWNlbnRlcgogICAgICAgICAgICAgIC5jb2wtbGctMy5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC0yLmgtMTAwLmJyLTEKICAgICAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzEzLnBuZyIgYWx0PSIiKQogICAgICAgICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmRfX3RleHQucC00CiAgICAgICAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBJbnRlcmFjdGl2aWRhZAogICAgICAgICAgICAgICAgICAgIHAubWItMCBGYWNpbGl0YW4gbGEgY29tdW5pY2FjacOzbiBtZWRpYW50ZSBmb3JvcywgdmlkZW9jb25mZXJlbmNpYXMgeSBlc3BhY2lvcyBjb2xhYm9yYXRpdm9zIChUb3JyZXMgUXVpw7FvbmVzLCAyMDE1KS4gCiAgICAgICAgICAgICAgLmNvbC1sZy0zLm1iLTQoZGF0YS1hb3M9Inpvb20taW4tZG93biIpCiAgICAgICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQtMi5oLTEwMC5ici0xCiAgICAgICAgICAgICAgICAgIGltZy5jdXN0b20taW1hZ2UtY2FyZF9faW1hZ2Uoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy8xNC5wbmciIGFsdD0iIikKICAgICAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgQWRhcHRhYmlsaWRhZAogICAgICAgICAgICAgICAgICAgIHAubWItMCBFbXBsZWFuIGFsZ29yaXRtb3MgZGUgYXByZW5kaXphamUgYXV0b23DoXRpY28gcGFyYSBwZXJzb25hbGl6YXIgbG9zIGNvbnRlbmlkb3MsIHNlZ8O6biBlbCBwZXJmaWwgZGVsIGVzdHVkaWFudGUuCiAgICAgICAgICAgICAgLmNvbC1sZy0zLm1iLTQoZGF0YS1hb3M9Inpvb20taW4tZG93biIpCiAgICAgICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQtMi5oLTEwMC5ici0xCiAgICAgICAgICAgICAgICAgIGltZy5jdXN0b20taW1hZ2UtY2FyZF9faW1hZ2Uoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy8xNS5wbmciIGFsdD0iIikKICAgICAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgQWNjZXNpYmlsaWRhZAogICAgICAgICAgICAgICAgICAgIHAubWItMCBDdW1wbGVuIGNvbiBlc3TDoW5kYXJlcyBwYXJhIGluY2x1aXIgYSBwZXJzb25hcyBjb24gZGl2ZXJzYXMgbmVjZXNpZGFkZXMgZWR1Y2F0aXZhcyAoUmFtw61yZXogUmFtw61yZXogJiBGZXJuw6FuZGV6IGRlIENhc3RybywgMjAxOSkuIAogICAgICAgICAgICAgIC5jb2wtbGctMy5tYi00KGRhdGEtYW9zPSJ6b29tLWluLWRvd24iKQogICAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTIuaC0xMDAuYnItMQogICAgICAgICAgICAgICAgICBpbWcuY3VzdG9tLWltYWdlLWNhcmRfX2ltYWdlKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvMTYucG5nIiBhbHQ9IiIpCiAgICAgICAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZF9fdGV4dC5wLTQKICAgICAgICAgICAgICAgICAgICBoNS5tYi0yLnRleHQtY2VudGVyIEV2YWx1YWNpw7NuIGludGVncmFsCiAgICAgICAgICAgICAgICAgICAgcC5tYi0wIEluY29ycG9yYW4gYW5hbMOtdGljYSBkZSBhcHJlbmRpemFqZSBwYXJhIG1vbml0b3JlYXIgZWwgZGVzZW1wZcOxbyB5IGFqdXN0YXIgZXN0cmF0ZWdpYXMgcGVkYWfDs2dpY2FzIChCZWxsb2NoLCBzLmYuKS4gICAKCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy04CiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgVW4gZWplbXBsbyBleGl0b3NvIGVuIGVkdWNhY2nDs24gc3VwZXJpb3IsIGVzIGxhIGltcGxlbWVudGFjacOzbiBkZSBFVkEgZW4gcHJvZ3JhbWFzIGRlIGdlc3Rpw7NuIGRlIHByb3llY3RvcywgZG9uZGUgc2UgdXRpbGl6YW4gc2ltdWxhZG9yZXMgZmluYW5jaWVyb3MgeSB0YWJsZXJvcyBkZSBhbsOhbGlzaXMgZGUgZGF0b3MgcGFyYSByZWFsaXphciBkaWFnbsOzc3RpY29zIGVzdHJhdMOpZ2ljb3MgeSB0b21hciBkZWNpc2lvbmVzIGJhc2FkYXMgZW4gZXZpZGVuY2lhLgogICAgICAgIC5iZy1jb2xvci04LnAtNC5tYi00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydAogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy8xNy5zdmciKQogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgcC5tYi0wIExvcyBFVkEgc29uIGVsZW1lbnRvcyBjbGF2ZXMgZW4gbGEgdHJhbnNmb3JtYWNpw7NuIGVkdWNhdGl2YSwgZGFkbyBxdWUgb2ZyZWNlbiBlbnRvcm5vcyBhZGFwdGFibGVzLCBpbnRlcmFjdGl2b3MgeSBhY2Nlc2libGVzLCBxdWUgZmF2b3JlY2VuIGVsIGRlc2Fycm9sbG8gZGUgY29tcGV0ZW5jaWFzIHByb2Zlc2lvbmFsZXMuIEVuIGVsIG1hcmNvIGRlIGxhIGVzcGVjaWFsaXphY2nDs24gZW4gaW5ub3ZhY2nDs24gZWR1Y2F0aXZhLCBzdSBhcGxpY2FjacOzbiBubyBzb2xvIGZhY2lsaXRhIGxhIGFkcXVpc2ljacOzbiBkZSBjb25vY2ltaWVudG9zLCBzaW5vIHF1ZSB0YW1iacOpbiBmb3J0YWxlY2UgaGFiaWxpZGFkZXMgY29tbyBsYSByZXNvbHVjacOzbiBkZSBwcm9ibGVtYXMsIGVsIHBlbnNhbWllbnRvIGNyw610aWNvIHkgbGEgZ2VzdGnDs24gZGVsIHRpZW1wbywgcHJlcGFyYW5kbyBhIGxvcyBlc3R1ZGlhbnRlcyBwYXJhIGxvcyByZXRvcyBkZWwgbXVuZG8gZGlnaXRhbC4KICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvMTgucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAjdF8xXzIudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMS4yXSBCZW5lZmljaW9zIHkgZGVzYWbDrW9zIGRlIGxvcyBlbnRvcm5vcyB2aXJ0dWFsZXMgZW4gbGEgZWR1Y2FjacOzbiAKCiAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBFbCB1c28gZGUgRVZBIGVuIGxhIGVkdWNhY2nDs24sIG9mcmVjZSBtw7psdGlwbGVzIGJlbmVmaWNpb3MgcXVlIG9wdGltaXphbiBsYSBleHBlcmllbmNpYSBkZSBlbnNlw7FhbnphLWFwcmVuZGl6YWplLiBFc3RvcyBlbnRvcm5vcyBubyBzb2xvIGFtcGzDrWFuIGxhcyBwb3NpYmlsaWRhZGVzIGRlIGFjY2Vzbywgc2lubyBxdWUgcGVybWl0ZW4gbnVldmFzIGZvcm1hcyBkZSBpbnRlcmFjY2nDs24geSBhZGFwdGFjacOzbiBwZWRhZ8OzZ2ljYTogICAKCiAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzE5LnBuZyIsIGFsdD0iIiwgZGF0YS1hb3M9Inpvb20taW4iKS5tYi00Lm1iLWxnLTAKICAgICAgLmNvbC1sZy04CiAgICAgICAgTGluZWFUaWVtcG9ELmNvbG9yLXByaW1hcmlvLmxhcmdlKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgcChudW1lcm89IjEiIHRpdHVsbz0iQWNjZXNpYmlsaWRhZCB5IGZsZXhpYmlsaWRhZCIpIExvcyBFVkEgZWxpbWluYW4gbGFzIGJhcnJlcmFzIGRlIHRpZW1wbyB5IGVzcGFjaW8sIHBlcm1pdGllbmRvIGEgbG9zIGVzdHVkaWFudGVzIGFjY2VkZXIgYSBsb3MgY29udGVuaWRvcyBkZXNkZSBjdWFscXVpZXIgbHVnYXIgeSBlbiBob3JhcmlvcyBhZGFwdGFkb3MgYSBzdXMgbmVjZXNpZGFkZXMuIEVuIHVuIGNvbnRleHRvIGRlIGZvcm1hY2nDs24gcHJvZmVzaW9uYWwsIGVzdG8gcmVzdWx0YSBjbGF2ZSBwYXJhIHBlcnNvbmFzIHF1ZSwgc2ltdWx0w6FuZWFtZW50ZSwgdHJhYmFqYW4geSBlc3R1ZGlhbiAoUmFtw61yZXogQ2hpcmlub3MsIDIwMTMpLgogICAgICAgICAgcChudW1lcm89IjIiIHRpdHVsbz0iUGVyc29uYWxpemFjacOzbiBkZWwgYXByZW5kaXphamUiKSBBIHRyYXbDqXMgZGUgaGVycmFtaWVudGFzIGRlIGFuw6FsaXNpcyBkZSBkYXRvcywgbG9zIEVWQSBwdWVkZW4gYWRhcHRhciBsb3MgY29udGVuaWRvcywgc2Vnw7puIGVsIHJpdG1vIHkgbGFzIG5lY2VzaWRhZGVzIGRlIGNhZGEgZXN0dWRpYW50ZSwgZmFjaWxpdGFuZG8gZWwgYXByZW5kaXphamUgYXV0b2RpcmlnaWRvLiBVbiBlamVtcGxvIHByw6FjdGljbyBkZSBlc3RvIHNlIG9ic2VydmEgZW4gY3Vyc29zIGRlIGdlc3Rpw7NuIGRlIHByb3llY3RvcywgZG9uZGUgbG9zIGVzdHVkaWFudGVzIGF2YW56YW4gYSBzdSBwcm9waW8gcml0bW8geSByZWNpYmVuIHJldHJvYWxpbWVudGFjacOzbiBhdXRvbWF0aXphZGEgc29icmUgc3VzIGRlc2VtcGXDsW9zIChCYXV0aXN0YSBQw6lyZXosIEJvcmdlcyBTw6FpeiAmIEZvcsOpcyBNaXJhdmFsbGVzLCAyMDE2KS4KICAgICAgICAgIHAobnVtZXJvPSIzIiB0aXR1bG89IkZvbWVudG8gZGUgbGEgY29sYWJvcmFjacOzbiIpIExvcyBlbnRvcm5vcyBkaWdpdGFsZXMgZmFjaWxpdGFuIGxhIGludGVyYWNjacOzbiBlbnRyZSBlc3R1ZGlhbnRlcyBtZWRpYW50ZSBmb3JvcyBkZSBkaXNjdXNpw7NuLCB0cmFiYWpvcyBlbiBncnVwbyB5IGhlcnJhbWllbnRhcyBjb2xhYm9yYXRpdmFzLCBlbiB0aWVtcG8gcmVhbC4gRW4gcHJvZ3JhbWFzIGRlIGlubm92YWNpw7NuIGVkdWNhdGl2YSwgbG9zIEVWQSBoYW4gZGVtb3N0cmFkbyBzZXIgZXNwYWNpb3MgY2xhdmVzIHBhcmEgZWwgaW50ZXJjYW1iaW8gZGUgY29ub2NpbWllbnRvcyB5IGxhIGNvbnN0cnVjY2nDs24gY29sZWN0aXZhIGRlbCBhcHJlbmRpemFqZSAoQWNldmVkby1CbGFuY28sIETDrWF6IFBlcmVhICYgRmVybsOhbmRleiBSb2Ryw61ndWV6LCAyMDI0KS4KICAgICAgICAgIHAobnVtZXJvPSI0IiB0aXR1bG89IkludGVncmFjacOzbiBkZSB0ZWNub2xvZ8OtYXMgZW1lcmdlbnRlcyIpIExhIGluY29ycG9yYWNpw7NuIGRlIGludGVsaWdlbmNpYSBhcnRpZmljaWFsLCByZWFsaWRhZCBhdW1lbnRhZGEgeSBzaW11bGFkb3JlcywgcGVybWl0ZSBlbnJpcXVlY2VyIGxhIGV4cGVyaWVuY2lhIGVkdWNhdGl2YS4gRW4gZWwgw6FtYml0byBkZSBsYSBlZHVjYWNpw7NuIGZpbmFuY2llcmEsIHBvciBlamVtcGxvLCBlbCB1c28gZGUgc2ltdWxhZG9yZXMgY29udGFibGVzIGVuIEVWQSwgcGVybWl0ZSBhIGxvcyBlc3R1ZGlhbnRlcyBwcmFjdGljYXIgZW4gZW50b3Jub3Mgc2VndXJvcyBhbnRlcyBkZSBhcGxpY2FyIGxvcyBjb25vY2ltaWVudG9zIGVuIGVsIG11bmRvIHJlYWwgKFRvcnJlcyBRdWnDsW9uZXMsIDIwMTUpLiAgIAoKCiAgICBoNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRGVzYWbDrW9zIGRlIGxvcyBlbnRvcm5vcyB2aXJ0dWFsZXMgZW4gbGEgZWR1Y2FjacOzbgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNSBBIHBlc2FyIGRlIHN1cyBiZW5lZmljaW9zLCBsYSBpbXBsZW1lbnRhY2nDs24gZGUgRVZBIGVuIGxhIGVkdWNhY2nDs24sIHByZXNlbnRhIGRlc2Fmw61vcyBxdWUgZGViZW4gc2VyIGFib3JkYWRvcyBwYXJhIGdhcmFudGl6YXIgc3UgZWZlY3RpdmlkYWQuIEVzdG9zIHJldG9zIGluY2x1eWVuIGFzcGVjdG9zIHRlY25vbMOzZ2ljb3MsIHBlZGFnw7NnaWNvcyB5IGRlIGdlc3Rpw7NuIGVkdWNhdGl2YToKCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby1zbGlkZXIubWItNShkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgU2x5ZGVyQSh0aXBvPSJiIikuYmctd2hpdGUKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgQnJlY2hhIGRpZ2l0YWwgeSBhY2Nlc28gYSBsYSB0ZWNub2xvZ8OtYQogICAgICAgICAgICAgIHAgTm8gdG9kb3MgbG9zIGVzdHVkaWFudGVzIGN1ZW50YW4gY29uIGFjY2VzbyBhIGRpc3Bvc2l0aXZvcyB5IGNvbmV4acOzbiBlc3RhYmxlIGEgSW50ZXJuZXQsIGxvIHF1ZSBwdWVkZSBnZW5lcmFyIGRlc2lndWFsZGFkZXMgZW4gbGEgZXhwZXJpZW5jaWEgZGUgYXByZW5kaXphamUuIFVuYSBlc3RyYXRlZ2lhIHBhcmEgbWl0aWdhciBlc3RlIGRlc2Fmw61vLCBlcyBlbCB1c28gZGUgcGxhdGFmb3JtYXMgY29uIHZlcnNpb25lcyBvZmZsaW5lIHkgYWNjZXNpYmlsaWRhZCBtdWx0aXBsYXRhZm9ybWEgKFJhbcOtcmV6IFJhbcOtcmV6ICYgRmVybsOhbmRleiBkZSBDYXN0cm8sIDIwMTkpLiAgICAgICAKICAgICAgICAgICAgLmNvbC1sZy01Lm1iLTMubWItbGctMAogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvMjEucG5nIikKCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg1IEdlc3Rpw7NuIGRlbCBhcHJlbmRpemFqZSBhdXTDs25vbW8KICAgICAgICAgICAgICBwIExhIGVkdWNhY2nDs24gZW4gZW50b3Jub3MgdmlydHVhbGVzIHJlcXVpZXJlIHVuIGFsdG8gZ3JhZG8gZGUgYXV0b2Rpc2NpcGxpbmEgcG9yIHBhcnRlIGRlIGxvcyBlc3R1ZGlhbnRlcy4gRW4gcHJvZ3JhbWFzIGRlIHBvc2dyYWRvLCBsYSBmYWx0YSBkZSBhY29tcGHDsWFtaWVudG8gcGVyc29uYWxpemFkbyBwdWVkZSBhZmVjdGFyIGxhIHJldGVuY2nDs24geSBlbCByZW5kaW1pZW50byBhY2Fkw6ltaWNvLiBMYSBpbXBsZW1lbnRhY2nDs24gZGUgbWVudG9yw61hcyBkaWdpdGFsZXMsIGhhIGRlbW9zdHJhZG8gc2VyIHVuYSBzb2x1Y2nDs24gZWZlY3RpdmEgcGFyYSBlc3RlIHByb2JsZW1hIChCZWxsb2NoLCBzLmYuKS4gICAgCiAgICAgICAgICAgIC5jb2wtbGctNS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzIyLnBuZyIpCgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgICBoNSBDYXBhY2l0YWNpw7NuIGRvY2VudGUgZW4gZWwgdXNvIGRlIEVWQQogICAgICAgICAgICAgIHAgTGEgdHJhbnNmb3JtYWNpw7NuIGRpZ2l0YWwgcmVxdWllcmUgcXVlIGxvcyBkb2NlbnRlcyBhZHF1aWVyYW4gaGFiaWxpZGFkZXMsIHRhbnRvIGVuIGVsIGRpc2XDsW8gaW5zdHJ1Y2Npb25hbCBjb21vIGVuIGVsIHVzbyBkZSBoZXJyYW1pZW50YXMgdGVjbm9sw7NnaWNhcy4gRGUgYWN1ZXJkbyBjb24gZXN0dWRpb3MgcmVjaWVudGVzLCBsYSBmb3JtYWNpw7NuIHBlZGFnw7NnaWNhIGVuIGVudG9ybm9zIGRpZ2l0YWxlcywgc2lndWUgc2llbmRvIHVuIGRlc2Fmw61vIHBhcmEgZGl2ZXJzYXMgaW5zdGl0dWNpb25lcy4gRGVudHJvIGRlIGxhIGludmVyc2nDs24gZW4gbGEgZm9ybWFjacOzbiBkb2NlbnRlLCBzZSBlbmN1ZW50cmEgbGEgY2xhdmUgcGFyYSBhcHJvdmVjaGFyIGFsIG3DoXhpbW8gZWwgcG90ZW5jaWFsIGRlIGxvcyBFVkEuCiAgICAgICAgICAgIC5jb2wtbGctNS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzIzLnBuZyIpCgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgICBoNSBFdmFsdWFjacOzbiB5IHNlZ3VpbWllbnRvIGRlbCBhcHJlbmRpemFqZQogICAgICAgICAgICAgIHAgRGVudHJvIGRlIGxhIGVkdWNhY2nDs24gcHJlc2VuY2lhbCwgbGEgZXZhbHVhY2nDs24gZW4gZW50b3Jub3MgdmlydHVhbGVzIGRlYmUgdGVuZXIgZW4gY3VlbnRhIG51ZXZhcyBlc3RyYXRlZ2lhcyBxdWUgaW5jcmVtZW50ZW4gZWwgYXByZW5kaXphamUgbcOhcyBhbGzDoSBkZSBsb3MgZXjDoW1lbmVzIGhhYml0dWFsZXMuIExhIGFkb3BjacOzbiBkZSByw7picmljYXMsIHByb3llY3RvcyBhcGxpY2Fkb3MgeSBldmFsdWFjacOzbiBmb3JtYXRpdmEsIHNvbiBlc3RyYXRlZ2lhcyBhZGVjdWFkYXMgcGFyYSBtZWpvcmFyIGxhIGV2YWx1YWNpw7NuIGRlbCByZW5kaW1pZW50byBlc3R1ZGlhbnRpbC4gICAgICAgIAogICAgICAgICAgICAuY29sLWxnLTUubWItMy5tYi1sZy0wCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy8yNC5wbmciKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAKICAgIC5iZy1jb2xvci05Lm1iLTUucC0wLnAtbWQtNC5wLWxnLTAgCiAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIgICAgICAgICAgIAogICAgICAgIC5jb2wtbGctNC5tYi00Lm1iLWxnLTAgCiAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvMjUucG5nIikgICAgICAgICAgCiAgICAgICAgLmNvbC1sZy04CiAgICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5qMS5tYi0wIExvcyBlbnRvcm5vcyB2aXJ0dWFsZXMgaGFuIHJlZGVmaW5pZG8gbGEgZWR1Y2FjacOzbiwgYnJpbmRhbmRvIGFjY2VzbyBmbGV4aWJsZSwgYXByZW5kaXphamUgcGVyc29uYWxpemFkbyB5IGhlcnJhbWllbnRhcyBjb2xhYm9yYXRpdmFzIHBhcmEgbGEgY29uc3RydWNjacOzbiBkZWwgY29ub2NpbWllbnRvLiBTaW4gZW1iYXJnbywgc3UgaW1wbGVtZW50YWNpw7NuIHJlcXVpZXJlIGVzdHJhdGVnaWFzIHF1ZSBtaW5pbWljZW4gbGFzIGJyZWNoYXMgdGVjbm9sw7NnaWNhcywgZm9ydGFsZXpjYW4gbGEgYXV0b25vbcOtYSBkZSBsb3MgZXN0dWRpYW50ZXMgeSBvcHRpbWljZW4gbGFzIHByw6FjdGljYXMgZG9jZW50ZXMuIEVuIGVsIGNvbnRleHRvIGRlIGxhIGlubm92YWNpw7NuIGVkdWNhdGl2YSBlbiBlbnRvcm5vcyB2aXJ0dWFsZXMsIGxvcyBFVkEgcmVwcmVzZW50YW4gdW4gY2FtaW5vIGhhY2lhIGxhIHRyYW5zZm9ybWFjacOzbiBkaWdpdGFsLCBwb3RlbmNpYW5kbyBubyBzb2xvIGxhIGFkcXVpc2ljacOzbiBkZSBjb25vY2ltaWVudG9zLCBzaW5vIHRhbWJpw6luIGVsIGRlc2Fycm9sbG8gZGUgaGFiaWxpZGFkZXMgY2xhdmVzIHBhcmEgZWwgbXVuZG8gbGFib3JhbCBkZWwgc2lnbG8gWFhJLiAgCgogICAgI3RfMV8zLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDEuM10gVGVjbm9sb2fDrWFzIHkgcGxhdGFmb3JtYXMgcGFyYSBsYSBpbXBsZW1lbnRhY2nDs24gZGUgRVZBICAKCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy04CiAgICAgICAgLmJnLWNvbG9yLTMucC00Lm1iLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0CiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzI2LnN2ZyIpCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTAgTGEgaW1wbGVtZW50YWNpw7NuIGRlIEVudG9ybm9zIFZpcnR1YWxlcyBkZSBBcHJlbmRpemFqZSAoRVZBKSwgc2UgaGEgdmlzdG8gZm9ydGFsZWNpZGEgcG9yIGVsIGRlc2Fycm9sbG8gZGUgdGVjbm9sb2fDrWFzIHkgcGxhdGFmb3JtYXMgcXVlIGZhY2lsaXRhbiBsb3MgcHJvY2Vzb3MgZGUgZW5zZcOxYW56YSB5IGFwcmVuZGl6YWplIGVuIGVudG9ybm9zIGRpZ2l0YWxlcy4gRXN0YXMgaGVycmFtaWVudGFzIG5vIHNvbG8gb3B0aW1pemFuIGxhIGdlc3Rpw7NuIGRlbCBjb25vY2ltaWVudG8sIHNpbm8gcXVlIHBlcm1pdGVuIHBlcnNvbmFsaXphciBsYSBleHBlcmllbmNpYSBlZHVjYXRpdmEsIGFkYXB0w6FuZG9sYSBhIGxhcyBuZWNlc2lkYWRlcyBpbmRpdmlkdWFsZXMgZGUgbG9zIGVzdHVkaWFudGVzLiBMYSBlbGVjY2nDs24gYWRlY3VhZGEgZGUgdGVjbm9sb2fDrWFzIHkgcGxhdGFmb3JtYXMgZXMgY3J1Y2lhbCBwYXJhIGFzZWd1cmFyIHVuIHByb2Nlc28gZm9ybWF0aXZvIGVmaWNheiwgaW5jbHVzaXZvIHkgc29zdGVuaWJsZSAoU2lsdmEgUXVpcm96LCAyMDExKS4KICAgICAgICBoNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgVGVjbm9sb2fDrWFzIGNsYXZlcyBlbiBsYSBpbXBsZW1lbnRhY2nDs24gZGUgRVZBCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTGEgZWZlY3RpdmlkYWQgZGUgbG9zIEVWQSBlc3TDoSBkaXJlY3RhbWVudGUgcmVsYWNpb25hZGEgY29uIGVsIHVzbyBkZSB0ZWNub2xvZ8OtYXMgcXVlIGZhdm9yZWNlbiBsYSBpbnRlcmFjY2nDs24sIGxhIGdlc3Rpw7NuIGRlIGNvbnRlbmlkb3MgeSBsYSBldmFsdWFjacOzbiBkZWwgYXByZW5kaXphamUuIEEgY29udGludWFjacOzbiwgc2UgZGVzY3JpYmVuIGxhcyBtw6FzIHJlbGV2YW50ZXM6CiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzI3LnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikgICAgCgogICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy8yOC5zdmciLCBhbHQ9IiIsIGRhdGEtYW9zPSJ6b29tLWluIikubWItNC5tYi1sZy0wCiAgICAgIC5jb2wtbGctOAogICAgICAgIExpbmVhVGllbXBvRC5jb2xvci1wcmltYXJpby5sYXJnZShkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIHAobnVtZXJvPSIxIiB0aXR1bG89IlNpc3RlbWFzIGRlIEdlc3Rpw7NuIGRlbCBBcHJlbmRpemFqZSAoTE1TKSIpIFBsYXRhZm9ybWFzIGNvbW8gTW9vZGxlLCBCbGFja2JvYXJkIHkgQ2FudmFzLCBwZXJtaXRlbiBvcmdhbml6YXIgY3Vyc29zLCBkaXN0cmlidWlyIG1hdGVyaWFsZXMsIGdlc3Rpb25hciB0YXJlYXMgeSByZWFsaXphciBldmFsdWFjaW9uZXMuIEVzdGFzIGhlcnJhbWllbnRhcyBwcm9tdWV2ZW4gZWwgYXByZW5kaXphamUgYXV0w7Nub21vIHkgbGEgY29tdW5pY2FjacOzbiBjb25zdGFudGUgZW50cmUgZG9jZW50ZXMgeSBlc3R1ZGlhbnRlcyAoUmFtw61yZXogQ2hpcmlub3MsIDIwMTMpLgogICAgICAgICAgcChudW1lcm89IjIiIHRpdHVsbz0iSW50ZWxpZ2VuY2lhIEFydGlmaWNpYWwgKElBKSIpIEZhY2lsaXRhIGxhIHBlcnNvbmFsaXphY2nDs24gZGVsIGFwcmVuZGl6YWplIG1lZGlhbnRlIHR1dG9yZXMgaW50ZWxpZ2VudGVzLCBhbsOhbGlzaXMgcHJlZGljdGl2byBkZWwgcmVuZGltaWVudG8geSByZWNvbWVuZGFjaW9uZXMgYXV0b23DoXRpY2FzIGRlIGNvbnRlbmlkb3MuIFN1IGFwbGljYWNpw7NuIHBlcm1pdGUgcXVlIGNhZGEgZXN0dWRpYW50ZSBzaWdhIHVuIGNhbWlubyBmb3JtYXRpdm8sIGFjb3JkZSBjb24gc3UgcHJvZ3Jlc28gKEJhdXRpc3RhIFDDqXJleiwgQm9yZ2VzIFPDoWl6ICYgRm9yw6lzIE1pcmF2YWxsZXMsIDIwMTYpLgogICAgICAgICAgcChudW1lcm89IjMiIHRpdHVsbz0iUmVhbGlkYWQgQXVtZW50YWRhIChSQSkgeSBSZWFsaWRhZCBWaXJ0dWFsIChSVikiKSBFc3RhcyB0ZWNub2xvZ8OtYXMgcGVybWl0ZW4gY3JlYXIgZXhwZXJpZW5jaWFzIGlubWVyc2l2YXMgYSB0cmF2w6lzIGRlIHNpbXVsYWNpb25lcyB5IGxhYm9yYXRvcmlvcyB2aXJ0dWFsZXMuIEVuIMOhcmVhcyBjb21vIGluZ2VuaWVyw61hLCBsb3MgZXN0dWRpYW50ZXMgcHVlZGVuIGludGVyYWN0dWFyIGNvbiBtb2RlbG9zIDNEIGVuIHRpZW1wbyByZWFsLCBwb3RlbmNpYW5kbyBlbCBhcHJlbmRpemFqZSBwcsOhY3RpY28gKEFjZXZlZG8tQmxhbmNvLCBEw61heiBQZXJlYSAmIEZlcm7DoW5kZXogUm9kcsOtZ3VleiwgMjAyNCkuCiAgICAgICAgICBwKG51bWVybz0iNCIgdGl0dWxvPSI8aT5CbG9ja2NoYWluPC9pPiIpIEdhcmFudGl6YSBsYSBzZWd1cmlkYWQgeSBhdXRlbnRpY2lkYWQgZGUgY2VydGlmaWNhY2lvbmVzIGRpZ2l0YWxlcywgbG8gcXVlIGZhY2lsaXRhIGxhIHZlcmlmaWNhY2nDs24gZGVzY2VudHJhbGl6YWRhIGRlIGNyZWRlbmNpYWxlcyB5IHByb211ZXZlIGxhIG1vdmlsaWRhZCBhY2Fkw6ltaWNhIGludGVybmFjaW9uYWwuIAoKICAgIGg0KGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBQbGF0YWZvcm1hcyBwYXJhIGxhIGltcGxlbWVudGFjacOzbiBkZSBFVkEKICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTUgRXhpc3RlbiBtw7psdGlwbGVzIHBsYXRhZm9ybWFzIGVkdWNhdGl2YXMgcXVlIHBlcm1pdGVuIHBvbmVyIGVuIHByw6FjdGljYSBlbnRvcm5vcyB2aXJ0dWFsZXMgZGUgYXByZW5kaXphamUuIEEgY29udGludWFjacOzbiwgc2UgcHJlc2VudGFuIGFsZ3VuYXMgZGUgbGFzIG3DoXMgdXRpbGl6YWRhcyBlbiBlZHVjYWNpw7NuIG1lZGlhIHkgc3VwZXJpb3IsIGp1bnRvIGNvbiBzdXMgY2FyYWN0ZXLDrXN0aWNhcyBwcmluY2lwYWxlczoKCiAgICBUYWJzQyhkYXRhLWFvcz0iZmFkZS1yaWdodCIpLmNvbG9yLXByaW1hcmlvLm1iLTUKICAgICAgLmJnLWNvbG9yLTEwLmJvcmRlci5weC00LnAtbWQtNS5weS0zKHRpdHVsbz0iTW9vZGxlIiA6aWNvbj0icmVxdWlyZSgnQC9hc3NldHMvYnVsbGV0cy8xLnN2ZycpIikKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNy5jb2wteGwtOC5tYi00Lm1iLW1kLTAKICAgICAgICAgICAgaDQgTW9vZGxlIAogICAgICAgICAgICBwIFBsYXRhZm9ybWEgZGUgY8OzZGlnbyBhYmllcnRvIGFsdGFtZW50ZSBwZXJzb25hbGl6YWJsZSBxdWUgcGVybWl0ZSBkaXNlw7FhciBjdXJzb3MsIG9yZ2FuaXphciByZWN1cnNvcyB5IGdlc3Rpb25hciBhY3RpdmlkYWRlcyBlZHVjYXRpdmFzLiBFcyBjb21wYXRpYmxlIGNvbiBoZXJyYW1pZW50YXMgZXh0ZXJuYXMgeSBhbXBsaWFtZW50ZSBhZG9wdGFkYSBwb3IgaW5zdGl0dWNpb25lcyBlZHVjYXRpdmFzLiAgCiAgICAKICAgICAgICAgIC5jb2wtbWQtOC5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xLm1iLTMubWItbGctMAogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzI5LnBuZycsIGFsdD0nJykgICAgCgogICAgICAuYmctY29sb3ItMTAuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJHb29nbGUgQ2xhc3Nyb29tIiA6aWNvbj0icmVxdWlyZSgnQC9hc3NldHMvYnVsbGV0cy8xLnN2ZycpIikKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNy5jb2wteGwtOC5tYi00Lm1iLW1kLTAKICAgICAgICAgICAgaDQgR29vZ2xlIENsYXNzcm9vbQogICAgICAgICAgICBwIEhlcnJhbWllbnRhIGludHVpdGl2YSwgaW50ZWdyYWRhIGFsIGVjb3Npc3RlbWEgZGUgR29vZ2xlLiBQZXJtaXRlIGRpc3RyaWJ1aXIgY29udGVuaWRvcywgcmVhbGl6YXIgdGFyZWFzIHkgZm9tZW50YXIgbGEgY29sYWJvcmFjacOzbiBjb24gZmFjaWxpZGFkIChSYW3DrXJleiBSYW3DrXJleiAmIEZlcm7DoW5kZXogZGUgQ2FzdHJvLCAyMDE5KS4gCiAgICAKICAgICAgICAgIC5jb2wtbWQtOC5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xLm1iLTMubWItbGctMAogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzMwLnBuZycsIGFsdD0nJykgCgogICAgICAuYmctY29sb3ItMTAuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJFZG1vZG8iIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzLzEuc3ZnJykiKQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgLmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMAogICAgICAgICAgICBoNCBFZG1vZG8KICAgICAgICAgICAgcCBQbGF0YWZvcm1hIHBlbnNhZGEgcGFyYSBlbCBhcHJlbmRpemFqZSBjb2xhYm9yYXRpdm8sIGNvbiB1bmEgaW50ZXJmYXogYW1pZ2FibGUgcXVlIGZhY2lsaXRhIGxhIGNvbXVuaWNhY2nDs24gZW50cmUgZG9jZW50ZXMgeSBlc3R1ZGlhbnRlcywgYXPDrSBjb21vIGVsIHNlZ3VpbWllbnRvIGRlbCBwcm9ncmVzbyBhY2Fkw6ltaWNvLgogICAgCiAgICAgICAgICAuY29sLW1kLTguY29sLWxnLTUuY29sLXhsLTQub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8zMS5wbmcnLCBhbHQ9JycpIAoKICAgICAgLmJnLWNvbG9yLTEwLmJvcmRlci5weC00LnAtbWQtNS5weS0zKHRpdHVsbz0iS2hhbiBBY2FkZW15IiA6aWNvbj0icmVxdWlyZSgnQC9hc3NldHMvYnVsbGV0cy8xLnN2ZycpIikKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNy5jb2wteGwtOC5tYi00Lm1iLW1kLTAKICAgICAgICAgICAgaDQgS2hhbiBBY2FkZW15IAogICAgICAgICAgICBwIEF1bnF1ZSBubyBlcyB1biBMTVMgdHJhZGljaW9uYWwsIG9mcmVjZSByZWN1cnNvcyBpbnRlcmFjdGl2b3MsIGV4cGxpY2FjaW9uZXMgZW4gdmlkZW8geSBhbmFsw610aWNhIGRlIGRlc2VtcGXDsW8uIEZhdm9yZWNlIGVsIGFwcmVuZGl6YWplIGF1dG9kaXJpZ2lkbyB5IHNlIGFkYXB0YSBhIGRpZmVyZW50ZXMgbml2ZWxlcyBlZHVjYXRpdm9zLiAKICAgIAogICAgICAgICAgLmNvbC1tZC04LmNvbC1sZy01LmNvbC14bC00Lm9yZGVyLTEubWItMy5tYi1sZy0wCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMzIucG5nJywgYWx0PScnKSAKCgogICAgaDQgQXBsaWNhY2nDs24gcHLDoWN0aWNhIHkgZGVzYXJyb2xsbyBkZSBoYWJpbGlkYWRlcwogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzMzLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikgICAgICAgICAKICAgICAgLmNvbC1sZy04CiAgICAgICAgLmJnLWNvbG9yLTEucC00Lm1iLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0CiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzM0LnN2ZyIpCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTAgRWwgdXNvIGRlIHRlY25vbG9nw61hcyB5IHBsYXRhZm9ybWFzIGVuIEVWQSBubyBzb2xvIHRyYW5zZm9ybWEgbGEgZXhwZXJpZW5jaWEgZGUgYXByZW5kaXphamUsIHNpbm8gcXVlIHRhbWJpw6luIGNvbnRyaWJ1eWUgYWwgZGVzYXJyb2xsbyBkZSBoYWJpbGlkYWRlcyBjbGF2ZXMgcGFyYSBlbCBkZXNlbXBlw7FvIHByb2Zlc2lvbmFsLiBQb3IgZWplbXBsbywgZW4gcHJvZ3JhbWFzIGRlIHBvc2dyYWRvIGVuIGdlc3Rpw7NuIGVkdWNhdGl2YSwgZWwgdXNvIGRlIGhlcnJhbWllbnRhcyBkZSBhbsOhbGlzaXMgZGUgZGF0b3MgZGVudHJvIGRlIGxvcyBMTVMsIHBlcm1pdGUgYSBsb3MgZXN0dWRpYW50ZXMgZGlzZcOxYXIgZXN0cmF0ZWdpYXMgZGUgbWVqb3JhIGluc3RpdHVjaW9uYWwsIGJhc2FkYXMgZW4gZXZpZGVuY2lhLgogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEFkZW3DoXMsIGxhIGluY29ycG9yYWNpw7NuIGRlIHNpbXVsYWRvcmVzIGRlIHRvbWEgZGUgZGVjaXNpb25lcyBwcm9tdWV2ZSBlbCBwZW5zYW1pZW50byBjcsOtdGljbyB5IGxhIHJlc29sdWNpw7NuIGRlIHByb2JsZW1hcyBlbiBjb250ZXh0b3MgcmVhbGVzLiBVbiBjYXNvIGRlc3RhY2FkbyBkZSBpbXBsZW1lbnRhY2nDs24gZXhpdG9zYSBlcyBlbCB1c28gZGUgaW50ZWxpZ2VuY2lhIGFydGlmaWNpYWwgZW4gbGEgcmV0cm9hbGltZW50YWNpw7NuIGF1dG9tYXRpemFkYS4gUGxhdGFmb3JtYXMgY29tbyBUdXJuaXRpbiB5IEdyYW1tYXJseSwgYnJpbmRhbiBhIGxvcyBlc3R1ZGlhbnRlcyBzdWdlcmVuY2lhcyBlbiB0aWVtcG8gcmVhbCBzb2JyZSBjb2hlcmVuY2lhLCBlc3RydWN0dXJhIHkgZXN0aWxvIGRlIHN1cyB0ZXh0b3MgYWNhZMOpbWljb3MsIGZhY2lsaXRhbmRvIHVuYSBtZWpvcmEgY29udGludWEgZW4gc3VzIGhhYmlsaWRhZGVzIGRlIGNvbXVuaWNhY2nDs24gZXNjcml0YS4KCiAgICAuYmctZnVsbC13aWR0aC5iZy1oODUKICAgICAgLnB4LTQucHgtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctMTIKICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAgIC5jb2wtbGctNyhkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItMy5tYi1sZy0wCiAgICAgICAgICAgICAgICBwLm1iLTAudGV4dC13aGl0ZS5tdC01IExhcyB0ZWNub2xvZ8OtYXMgeSBwbGF0YWZvcm1hcyBwYXJhIGxhIGltcGxlbWVudGFjacOzbiBkZSBFVkEsIGhhbiByZXZvbHVjaW9uYWRvIGxhIGVkdWNhY2nDs24sIHBlcm1pdGllbmRvIGV4cGVyaWVuY2lhcyBkZSBhcHJlbmRpemFqZSBtw6FzIGRpbsOhbWljYXMsIHBlcnNvbmFsaXphZGFzIHkgYWNjZXNpYmxlcy4gU3UgaW50ZWdyYWNpw7NuIGVuIGxvcyBwcm9jZXNvcyBmb3JtYXRpdm9zIG5vIHNvbG8gb3B0aW1pemEgbGEgZ2VzdGnDs24gZGVsIGNvbm9jaW1pZW50bywgc2lubyBxdWUgdGFtYmnDqW4gZm9ydGFsZWNlIGNvbXBldGVuY2lhcyBkaWdpdGFsZXMgZXNlbmNpYWxlcyBwYXJhIGxhIGVkdWNhY2nDs24gZGVsIHNpZ2xvIFhYSS4gUGFyYSBsb3MgZXN0dWRpYW50ZXMgZGUgcG9zZ3JhZG8sIGRvbWluYXIgZXN0YXMgaGVycmFtaWVudGFzIHJlcHJlc2VudGEgdW5hIHZlbnRhamEgZXN0cmF0w6lnaWNhIGVuIGxhIGlubm92YWNpw7NuIGVkdWNhdGl2YSB5IGVuIGxhIHRyYW5zZm9ybWFjacOzbiBkaWdpdGFsIGRlIGxvcyBlbnRvcm5vcyBkZSBhcHJlbmRpemFqZS4gICAgICAgICAgICAgIAogICAgICAgICAgICAgIC5jb2wtbGctNShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8zNS5zdmcnLCBhbHQ9IiIgKS5teC1hdXRvLm14LWxnLTAubXMtbGctYXV0by5tYi00Lm1iLWxnLTAgICAgICAgICAgICAKICAgICAgCiAgICAuYmctZnVsbC13aWR0aC5ib3JkZXItdG9wLmNvbG9yLXByaW1hcmlvCiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIE1BVEVSSUFMIENPTVBMRU1FTlRBUklPCiAgICAgICAgLnJvdy5tYXRlcmlhbC1jb21wbGVtZW50YXJpbwogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctNwogICAgICAgICAgICBwIExvcyBpbnZpdGFtb3MgYSBleHBsb3JhciBlbCBtYXRlcmlhbCBjb21wbGVtZW50YXJpbyBkZSBlc3RlIGN1cnNvLCBlbiBlc3RhIHNlY2Npw7NuIGVuY29udHJhcsOhIHJlY3Vyc29zIHF1ZSBsZSBwZXJtaXRpcsOhbiBwcm9mdW5kaXphciAgeSBlbnJpcXVlY2VyIHN1IGFwcmVuZGl6YWplIGVuIGxvcyB0ZW1hcyB0cmF0YWRvcyBlbiBlc3RhIHVuaWRhZC4KCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3LnNjaWVsby5vcmcubXgvc2NpZWxvLnBocD9waWQ9UzE2NjUtNjE4MDIwMjEwMDAxMDAxMDEmc2NyaXB0PXNjaV9hcnR0ZXh0X3BsdXMmdGxuZz1lcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIFJlY2lvIE1heW9yZ2EsIEouLCBHdXRpw6lycmV6LUVzdGViYW4sIFAuICYgU3XDoXJlei1HdWVycmVybywgQy4gKDIwMjEpLiBSZWN1cnNvcyBlZHVjYXRpdm9zIGFiaWVydG9zIGVuIGNvbXVuaWRhZGVzIHZpcnR1YWxlcyBkb2NlbnRlcy4gQXBlcnR1cmE6IFJldmlzdGEgZGUgSW5ub3ZhY2nDs24gRWR1Y2F0aXZhLCAxMygxKSwgMTAxLTExNy4gICAKCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2Jvb2suc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vcm9ja2NvbnRlbnQuY29tL2VzL2Jsb2cvYW1iaWVudGVzLXZpcnR1YWxlcy1kZS1hcHJlbmRpemFqZS8iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSByb2NrY29udGVudC4gKDIwMjQpLiBEZXNjdWJyZSBjw7NtbyBmdW5jaW9uYW4gbG9zIEFtYmllbnRlcyBWaXJ0dWFsZXMgZGUgQXByZW5kaXphamUgKEFWQSkgeSBxdcOpIGFwb3J0YW4gYSBsYSBlZHVjYWNpw7NuLiAgCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby15dC5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1JcG41U19laVI5cyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIFVMTGF1ZGlvdmlzdWFsIOKAkyBVbml2ZXJzaWRhZCBkZSBMYSBMYWd1bmEuICgyMDIyKS4gTW9kZWxvcyBkaWTDoWN0aWNvcyBkZSBsYXMgYXVsYXMgdmlydHVhbGVzOiB0ZW9yw61hIHkgcmVjb21lbmRhY2lvbmVzIHByw6FjdGljYXMgCgogICAgICAgICAgICAKCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy0zLm9mZnNldC1sZy0xCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL21hdGVyaWFsLWNvbXBsZW1lbnRhcmlvLnN2ZycsIGFsdD0nJykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgo="},null]}